#define NUM_LIGHTS 4

Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightColorBuffer
{
	float4 diffuseColor[NUM_LIGHTS];
};

struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 lightPos1 : TEXCOORD1;
	float3 lightPos2 : TEXCOORD2;
	float3 lightPos3 : TEXCOORD3;
	float3 lightPos4 : TEXCOORD4;
};

float4 PS(PixelInputType input) : SV_TARGET
{
	float4 textureColor = shaderTexture.Sample(SampleType, input.tex);
	
	// ¬ычисление количества света на данном пикселе в зависимости от позиции света
	float lightIntensity1 = saturate(dot(input.normal, input.lightPos1));
	float lightIntensity2 = saturate(dot(input.normal, input.lightPos2));
	float lightIntensity3 = saturate(dot(input.normal, input.lightPos3));
	float lightIntensity4 = saturate(dot(input.normal, input.lightPos4));
	
	// ¬ычисление рассе€ного цвета дл€ каждого из 4 источников света
	float4 color1 = diffuseColor[0] * lightIntensity1;
	float4 color2 = diffuseColor[1] * lightIntensity2;
	float4 color3 = diffuseColor[2] * lightIntensity3;
	float4 color4 = diffuseColor[3] * lightIntensity4;

	// перемножение пиксел€ из текстуры с 4 цветами света
	float4 color = saturate(color1 + color2 + color3 + color4) * textureColor;
	
	return color;
}